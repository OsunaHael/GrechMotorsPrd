@page "/"

@using GrechMotorsPrd.Shared.Models
@inject HttpClient Http
@inject SweetAlertService Swal

<div class="container vh-100 d-flex justify-content-center align-items-center mb-3">
    <div class="col-lg-8 col-md-10 col-sm-12">
        <div class="bg-white rounded-3 p-4 shadow-lg">
            <h1>Inicio / Start</h1>
            <div class="row m-3">
                <div class="row m-1">
                    <div class="col">
                        <div class="d-flex">
                            <InputText @bind-Value="qrCode" placeholder="Escanea el Código QR / Scan the QR Code" class="form-control rounded-start"></InputText>
                            @if(qrCode.EndsWith("M"))
                            {
                                <button type="submit" class="btn btn-outline-light bg-primary rounded-end" @onclick="GetFurnitureInfo">
                                    <i class="fa fa-search">
                                        <svg width="24" height="24" fill="none" viewBox="0 0 24 24">
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19.25 19.25L15.5 15.5M4.75 11C4.75 7.54822 7.54822 4.75 11 4.75C14.4518 4.75 17.25 7.54822 17.25 11C17.25 14.4518 14.4518 17.25 11 17.25C7.54822 17.25 4.75 14.4518 4.75 11Z"></path>
                                        </svg>
                                    </i>
                                </button>
                            }
                            else if(qrCode.EndsWith("P"))
                            {
                                <button type="submit" class="btn btn-outline-light bg-primary rounded-end" @onclick="GetPieceInfo">
                                    <i class="fa fa-search">
                                        <svg width="24" height="24" fill="none" viewBox="0 0 24 24">
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19.25 19.25L15.5 15.5M4.75 11C4.75 7.54822 7.54822 4.75 11 4.75C14.4518 4.75 17.25 7.54822 17.25 11C17.25 14.4518 14.4518 17.25 11 17.25C7.54822 17.25 4.75 14.4518 4.75 11Z"></path>
                                        </svg>
                                    </i>
                                </button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-outline-light bg-primary rounded-end">
                                    <i class="fa fa-search">
                                        <svg width="24" height="24" fill="none" viewBox="0 0 24 24">
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19.25 19.25L15.5 15.5M4.75 11C4.75 7.54822 7.54822 4.75 11 4.75C14.4518 4.75 17.25 7.54822 17.25 11C17.25 14.4518 14.4518 17.25 11 17.25C7.54822 17.25 4.75 14.4518 4.75 11Z"></path>
                                        </svg>
                                    </i>
                                </button>
                            }
                        </div>
                    </div>
                </div>
                @if(unitFurnitureCodeIsSuccess)
                {
                    unitPieceCodeIsSuccess = false;
                    <div class="row m-1">
                        <div class="col">
                            <p>G Number: @unit.g_number</p>
                            <p>Modelo / Unit Model: @unit.model</p>
                            <p>Número de mueble / Furniture Number: @furniture.furniture_number</p>
                            <p>Descripción / Description: @furniture.description</p>
                            <p>Opcion / Option: @unit.opt</p>
                            <p>Color: @unit.color</p>
                        </div>
                    </div>
                    <div class="row m-1">
                        <div class="col">
                            <label for="UserNumber" class="form-label" id="UserNumber">Número de Usuario / User Id</label>
                            <div class="d-flex">
                                <InputText @bind-Value="userNumber" placeholder="Escanea tu tarjeta de Usuario / Scan your User Id" class="form-control rounded-start"></InputText>
                                <button type="submit" class="btn btn-outline-light bg-primary rounded-end" @onclick="GetUser">
                                    <i class="fa fa-search">
                                        <svg width="24" height="24" fill="none" viewBox="0 0 24 24">
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19.25 19.25L15.5 15.5M4.75 11C4.75 7.54822 7.54822 4.75 11 4.75C14.4518 4.75 17.25 7.54822 17.25 11C17.25 14.4518 14.4518 17.25 11 17.25C7.54822 17.25 4.75 14.4518 4.75 11Z"></path>
                                        </svg>
                                    </i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="row m-1">
                        <div class="col">
                            <p>Nombre de Usuario / Username: @user.username</p>
                        </div>
                    </div>
                    <div class="row m-1">
                        <div class="col">
                            <label for="Procesos" class="form-label">Procesos / Process</label>
                            <InputSelect @bind-Value="status" class="form-select" aria-label="Procesos" id="Procesos">
                                <option selected>Proceso / Process</option>
                                <option value="Armado 1">Armado 1 / Assembly 1</option>
                                <option value="Armado 2">Armado 2 / Assembly 2</option>
                                <option value="Armado 3">Armado 3 / Assembly 3</option>
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row m-1">
                        <div class="col">
                            <button class="btn btn-success px-4" @onclick="async () => await FurniturePass(status)">Pass</button>
                            <button class="btn btn-danger px-4 mx-2" @onclick="FurnitureFail">Fail</button>
                        </div>
                    </div>
                    @if (furnitureFail)
                    {
                        <div class="row m-1">
                            <div class="col">

                                <label for="Fail" class="form-label">Cual fue la falla? / Why did it fail?</label>
                                <InputSelect @bind-Value="failStatus" class="form-select" aria-label="Fail" id="Fail">
                                    <option value="null" selected>Selecciona una opción</option>
                                    <option value="Rallado" selected>Rallado</option>
                                    <option value="Roto" selected>Roto</option>
                                    <option value="Pandeado" selected>Pandeado</option>
                                    <option value="Astillado" selected>Astillado</option>
                                </InputSelect>
                            </div>
                        </div>
                        <div class="row m-1">
                            <div class="col">
                                <button class="btn btn-danger px-4" @onclick="async () => await FurniturePass(failStatus)">Enviar reporte de falla</button>
                            </div>
                        </div>
                    }
                }
                else if(unitPieceCodeIsSuccess)
                {
                    unitFurnitureCodeIsSuccess = false;
                    <div class="row m-1">
                        <div class="col">
                            <p>G Number: @unit.g_number</p>
                            <p>Modelo / Unit Model: @unit.model</p>
                            <p>Opcion / Option: @unit.opt</p>
                            <p>Color: @unit.color</p>
                            <p>Pertenece a / Belongs to: @furniture.description</p>
                            <p>Numero de Pieza / Piece Number: @piece.piece_number</p>
                        </div>
                        <div class="col">
                            <div class="row">
                                <img src="@($"/Images/Pieces/{piece.piece_number}.png")" alt="Imagen de la pieza" />
                            </div>
                        </div>
                    </div>
                    <div class="row m-1">
                        <div class="col">
                            <label for="UserNumber" class="form-label" id="UserNumber">Número de Usuario / User Id</label>
                            <div class="d-flex">
                                <InputText @bind-Value="userNumber" placeholder="Escanea tu tarjeta de Usuario / Scan your User Id" class="form-control rounded-start"></InputText>
                                <button type="submit" class="btn btn-outline-light bg-primary rounded-end" @onclick="GetUser">
                                    <i class="fa fa-search">
                                        <svg width="24" height="24" fill="none" viewBox="0 0 24 24">
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19.25 19.25L15.5 15.5M4.75 11C4.75 7.54822 7.54822 4.75 11 4.75C14.4518 4.75 17.25 7.54822 17.25 11C17.25 14.4518 14.4518 17.25 11 17.25C7.54822 17.25 4.75 14.4518 4.75 11Z"></path>
                                        </svg>
                                    </i>
                                </button>                                
                            </div>
                        </div>
                    </div>
                    <div class="row m-1">
                        <div class="col">
                            <p>Nombre de Usuario / Username: @user.username</p>
                        </div>
                    </div>
                    <div class="row m-1">
                        <div class="col">
                            <label for="Procesos" class="form-label">Procesos / Process</label>
                            <InputSelect @bind-Value="status" class="form-select" aria-label="Procesos" id="Procesos">
                                <option selected>Proceso / Process</option>
                                <option value="Laminado">Laminado</option>
                                <option value="Corte">Corte</option>
                                <option value="Lijado">Lijado</option>
                                <option value="Pegado de Puertas">Pegado de Puertas</option>
                                <option value="Laminado de Puertas">Laminado de Puertas</option>
                                <option value="Lijado / Pintado de Puertas">Lijado / Pintado de Puertas</option>
                                <option value="Puerta de Fibra">Puerta de Fibra</option>
                                <option value="Pared Curva">Pared Curva</option>
                                <option value="Pared Recta">Pared Recta</option>
                                <option value="Pared de Heater">Pared de Heater</option>
                                <option value="Paredes Laterales de Fibra">Paredes Laterales de Fibra</option>
                                <option value="Tapizado">Tapizado</option>
                                <option value="Pulido de Piedra">Pulido de Piedra</option>
                                <option value="Closet o Mueble de Refri">Closet o Mueble de Refri</option>
                                <option value="Ottoman">Ottoman</option>
                                <option value="Portavasos">Portavasos</option>
                                <option value="Cajones de Pared">Cajones de Pared</option>
                                <option value="DVD Armado">DVD Armado</option>
                                <option value="Galley (Estructura)">Galley (Estructura)</option>
                                <option value="Galley (Instalacion de Puertas)">Galley (Instalacion de Puertas)</option>
                                <option value="Galley (Piedra y Tuberia)">Galley (Piedra y Tuberia)</option>
                                <option value="Gabinetes Superior (Estructura)">Gabinetes Superior (Estructura)</option>
                                <option value="Gabinetes Superior (Instalacion de puertas)">Gabinetes Superior (Instalacion de puertas)</option>
                                <option value="Gabinete Trasero Estructura">Gabinete Trasero Estructura</option>
                                <option value="Gabinete Trasero Puerta">Gabinete Trasero Puerta</option>
                                <option value="Instalacion de Luces">Instalacion de Luces</option>
                                <option value="Entrega">Entrega</option>
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row m-1">
                        <div class="col">
                            <button class="btn btn-success px-4" @onclick="async () => await PiecePass(status)">Pass</button>
                            <button class="btn btn-danger px-4 mx-2" @onclick="PieceFail">Fail</button>
                        </div>
                    </div>
                    @if (pieceFail)
                    {
                        <div class="row m-1">
                            <div class="col">

                                <label for="Fail" class="form-label">Cual fue la falla? / Why did it fail?</label>
                                <InputSelect @bind-Value="failStatus" class="form-select" aria-label="Fail" id="Fail">
                                    <option value="null" selected>Selecciona una opción</option>
                                    <option value="Rallado" selected>Rallado</option>
                                    <option value="Roto" selected>Roto</option>
                                    <option value="Pandeado" selected>Pandeado</option>
                                    <option value="Astillado" selected>Astillado</option>
                                </InputSelect>
                            </div>
                        </div>
                        <div class="row m-1">
                            <div class="col">
                                <button class="btn btn-danger px-4" @onclick="async () => await PiecePass(failStatus)">Enviar reporte de falla</button>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code 
{
    FurniturePieceModel furniturePiece = new FurniturePieceModel();
    UnitFurnitureModel unitFurniture = new UnitFurnitureModel();
    UnitPieceCodeModel unitPieceCode = new UnitPieceCodeModel();
    UnitFurnitureCodeModel unitFurnitureCode = new UnitFurnitureCodeModel();
    UnitModel unit = new UnitModel();
    FurnitureModel furniture = new FurnitureModel();
    PieceModel piece = new PieceModel();
    UserModel user = new UserModel();   
    HttpResponseMessage response = new HttpResponseMessage();

    string qrCode = String.Empty;
    string userNumber = String.Empty;
    string status = String.Empty;
    string failStatus = String.Empty;

    bool unitFurnitureCodeIsSuccess = false;
    bool unitPieceCodeIsSuccess = false;
    bool furnitureFail = false;
    bool pieceFail = false;

    private async Task GetFurnitureInfo()
    {
        try
        {
            string furnitureCodesUrl = $"api/UnitFurnitureCode/getUnitFurnitureByQrCode/{qrCode}";
            string unitFurnitureUrl = $"api/Unit/{unitFurnitureCode.unit_id}";
            string furnitureUrl = $"api/Furniture/getFurnitureById/{unitFurnitureCode.furniture_id}";

            response = await Http.GetAsync(furnitureCodesUrl);
            if (response.IsSuccessStatusCode)
            {
                unitPieceCodeIsSuccess = false;
                unitFurnitureCode = await response.Content.ReadFromJsonAsync<UnitFurnitureCodeModel>();

                // Asegúrate de que unitFurnitureCode se ha establecido antes de usarlo en la siguiente llamada HTTP
                unitFurnitureUrl = $"api/Unit/{unitFurnitureCode.unit_id}";
                var unitResponse = await Http.GetAsync(unitFurnitureUrl);
                unit = await unitResponse.Content.ReadFromJsonAsync<UnitModel>();

                // Asegúrate de que unitFurnitureCode se ha establecido antes de usarlo en la siguiente llamada HTTP
                furnitureUrl = $"api/Furniture/getFurnitureById/{unitFurnitureCode.furniture_id}";
                var furnitureResponse = await Http.GetAsync(furnitureUrl);
                furniture = await furnitureResponse.Content.ReadFromJsonAsync<FurnitureModel>();

                unitFurnitureCodeIsSuccess = true;
                StateHasChanged();
            }
        }
        catch(Exception ex)
        {
            await Swal.FireAsync(
                "Error",
                "Upss... Se encontró un error",
                SweetAlertIcon.Error
            );
            await Swal.CloseAsync();
            Console.WriteLine(ex.Message);
        }
    }

    private async Task GetPieceInfo()
    {
        string furnitureUrl = $"api/Furniture/getFurnitureById/{unitFurnitureCode.furniture_id}";
        string pieceCodesUrl = $"api/UnitPieceCode/getUnitPieceByIdentificationCode/{qrCode}";
        string unitPieceUrl = $"api/Unit/{unitPieceCode.unit_id}";
        string pieceUrl = $"api/Piece/getPieceById/{unitPieceCode.piece_id}";

        response = await Http.GetAsync(pieceCodesUrl);
        if (response.IsSuccessStatusCode)
        {
            unitFurnitureCodeIsSuccess = false;
            unitPieceCode = await response.Content.ReadFromJsonAsync<UnitPieceCodeModel>();

            // Asegúrate de que unitFurnitureCode se ha establecido antes de usarlo en la siguiente llamada HTTP
            furnitureUrl = $"api/Furniture/getFurnitureById/{unitPieceCode.furniture_id}";
            var furnitureResponse = await Http.GetAsync(furnitureUrl);
            furniture = await furnitureResponse.Content.ReadFromJsonAsync<FurnitureModel>();

            // Asegúrate de que unitPieceCode se ha establecido antes de usarlo en la siguiente llamada HTTP
            unitPieceUrl = $"api/Unit/{unitPieceCode.unit_id}";
            var unitResponse = await Http.GetAsync(unitPieceUrl);
            unit = await unitResponse.Content.ReadFromJsonAsync<UnitModel>();

            // Asegúrate de que unitPieceCode se ha establecido antes de usarlo en la siguiente llamada HTTP
            pieceUrl = $"api/Piece/getPieceById/{unitPieceCode.piece_id}";
            var pieceResponse = await Http.GetAsync(pieceUrl);
            piece = await pieceResponse.Content.ReadFromJsonAsync<PieceModel>();

            unitPieceCodeIsSuccess = true;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(response.StatusCode);
        }
    }

    private async Task GetUser()
    {
        string userUrl = $"api/User/getUserByUserNumber/{userNumber}";

        response = await Http.GetAsync(userUrl);
        if (response.IsSuccessStatusCode)
        {
            user = await response.Content.ReadFromJsonAsync<UserModel>();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(response.StatusCode);
        }
    }

    private async Task PiecePass(string pStatus)
    {
        string swalMessage = String.Empty;
        try
        {
            string pieceStatusUrl = $"api/PieceStatusHistory";
            if(!pieceFail)
            {
                var pieceStatusHistory = new PieceStatusHistory
                    {
                        piece_id = piece.id,
                        unit_id = unit.id,
                        user_id = user.id,
                        furniture_id = furniture.id,
                        fail = 0,
                        piece_status = pStatus
                    };
                response = await Http.PostAsJsonAsync(pieceStatusUrl, pieceStatusHistory);
            }
            else if(pieceFail)
            {
                var pieceStatusHistory = new PieceStatusHistory
                    {
                        piece_id = piece.id,
                        unit_id = unit.id,
                        user_id = user.id,
                        furniture_id = furniture.id,
                        fail = 1,
                        piece_status = pStatus
                    };
                response = await Http.PostAsJsonAsync(pieceStatusUrl, pieceStatusHistory);
            }
            if (pieceFail)
            {
                swalMessage = "El reporte de falla ha sido enviado exitosamente";
            }
            else
            {
                swalMessage = "¡El mueble ha pasado exitosamente!";
            }
            if (response.IsSuccessStatusCode)
            {
                await Swal.FireAsync(
                    "Success",
                    "¡La pieza ha pasado exitosamente!",
                    SweetAlertIcon.Success
                );
                await Swal.CloseAsync();
            }
            pieceFail = false;
        }
        catch(Exception ex)
        {
            await Swal.FireAsync(
                    "Error",
                    "Upss... Se encontró un error",
                    SweetAlertIcon.Error
                );
            await Swal.CloseAsync();
            Console.WriteLine(ex.Message);
            throw new Exception("An error occurred while creating the unit.", ex);
        }
    }

    private void PieceFail()
    {
        pieceFail = true;
    }

    private async Task FurniturePass(string fStatus)
    {
        string swalMessage = String.Empty;
        try
        {
            string furnitureStatusUrl = $"api/FurnitureStatusHistory";
            if(!furnitureFail)
            {
                var furnitureStatusHistory = new FurnitureStatusHistory
                    {
                        furniture_id = furniture.id,
                        unit_id = unit.id,
                        user_id = user.id,
                        fail = 0,
                        furniture_status = fStatus
                    };

                response = await Http.PostAsJsonAsync(furnitureStatusUrl, furnitureStatusHistory);
            }
            else if(furnitureFail)
            {
                var furnitureStatusHistory = new FurnitureStatusHistory
                    {
                        furniture_id = furniture.id,
                        unit_id = unit.id,
                        user_id = user.id,
                        fail = 1,
                        furniture_status = fStatus
                    };
                response = await Http.PostAsJsonAsync(furnitureStatusUrl, furnitureStatusHistory);
            }
            if(furnitureFail)
            {
                swalMessage = "El reporte de falla ha sido enviado exitosamente";
            }
            else
            {
                swalMessage = "¡El mueble ha pasado exitosamente!";
            }
            if (response.IsSuccessStatusCode)
            {
                await Swal.FireAsync(
                    "Success",
                    swalMessage,
                    SweetAlertIcon.Success
                );
                await Swal.CloseAsync();
            }
            furnitureFail = false;
        }
        catch(Exception ex)
        {
            await Swal.FireAsync(
                    "Error",
                    "Upss... Se encontró un error",
                    SweetAlertIcon.Error
                );
            await Swal.CloseAsync();
            Console.WriteLine(ex.Message);
            throw new Exception("An error occurred while creating the unit.", ex);
        }
    }

    private void FurnitureFail()
    {
        furnitureFail = true;
    }
}