@page "/registry"

@using GrechMotorsPrd.Client.Auth
@using GrechMotorsPrd.Client.Repository
@using GrechMotorsPrd.Shared.Models
@using GrechMotorsPrd.Shared.DTOs

@inject SweetAlertService Swal
@inject ILoginService loginService
@inject IRepository repository
@inject NavigationManager navigationManager

<div class="container vh-100 d-flex justify-content-center align-items-center mb-3">
    <div class="col-lg-8 col-md-10 col-sm-12">
        <div class="bg-white rounded-3 p-4 shadow-lg">
            <h1>Registro de Usuarios</h1>
            <div class="m-3">
                <EditForm Model="userModel" OnValidSubmit="CreateUser">
                    <DataAnnotationsValidator />
                    <div class="row m-3">
                        <div class="col">
                            <label>Nombre de Usuario:</label>
                            <InputText class="form-control" @bind-Value="userModel.username" placeholder="Ingresa un nombre sin espacios"></InputText>
                            <ValidationMessage For="@(() => userModel.username)"></ValidationMessage>
                        </div>
                        <div class="col">
                            <label>Numero de Empleado:</label>
                            <InputText class="form-control" @bind-Value="userModel.user_number"></InputText>
                            <ValidationMessage For="@(() => userModel.user_number)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="row m-3">
                        <div class="col">
                            <label>Correo:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="userModel.email" />
                                <ValidationMessage For="@(() => userModel.email)" />
                            </div>
                        </div>
                        <div class="col">
                            <label>Contraseña:</label>
                            <div>
                                <InputText type="password" class="form-control" @bind-Value="userModel.pwd" />
                                <ValidationMessage For="@(() => userModel.pwd)" />
                            </div>
                        </div>
                    </div>
                    <div class="row m-3">
                        <div class="col">
                            <button type="submit" class="btn btn-primary">Registrar</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private UserModel userModel = new UserModel();

    private async Task CreateUser()
    {
        var httpResponse = await repository.Post<UserModel, UserToken>("api/Account/create", userModel);
        if (httpResponse.Error)
        {
            var errorMessage = await httpResponse.GetErrorMessage();
            await Swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
        }
        else
        {
            var userToken = httpResponse.Response;
            // Hacer una solicitud GET para obtener el ID del último usuario
            var httpResponseGetLastUserId = await repository.Get<UserDto>("api/Account/getLastUserId");

            if (httpResponseGetLastUserId.Error)
            {
                var errorMessage = await httpResponseGetLastUserId.GetErrorMessage();
                await Swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
            }
            else
            {
                var userDto = httpResponseGetLastUserId.Response;
                userModel.identityUserId = userDto.Id;
                userModel.pwd = userDto.PasswordHash;
                var httpResponseUser = await repository.Post<UserModel>("api/User", userModel);
                if (httpResponseUser.Error)
                {
                    var errorMessage = await httpResponse.GetErrorMessage();
                    await Swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
                }
                else
                {
                    // Comprobar si userToken es null antes de acceder a su propiedad Token
                    if (userToken?.Token != null)
                    {
                        await loginService.Login(httpResponse.Response!);
                        navigationManager.NavigateTo("login");
                    }
                    else
                    {
                        // Manejar el caso en que userToken es null
                        await Swal.FireAsync("Error", "Hubo un error inesperado, para pedir ayuda vaya a la sección de Ayuda", SweetAlertIcon.Error);
                    }
                    
                }
            }
        }
    }
}