@page "/inputdata"
@using GrechMotorsPrd.Shared.Models
@inject HttpClient Http

<PageTitle>Input Data</PageTitle>

<div class="container vh-100 d-flex justify-content-center align-items-center mb-3">
    <div class="col-lg-8 col-md-10 col-sm-12">
        <div class="bg-white rounded-3 p-4 shadow-lg">
            <h1>Input Data</h1>
            <div class="m-3">
                <EditForm Model="newUnit">
                    <div class="row m-3">
                        <div class="col">
                            <label for="gNumber" class="form-label">G Number</label>
                            <InputNumber @bind-Value="newUnit.g_number" id="gNumber" class="form-control" placeholder="G_Number" aria-label="G_Number"></InputNumber>
                        </div>
                        <div class="col">
                            <label for="Modelo" class="form-label">Modelo</label>
                            <InputSelect @bind-Value="newUnit.model" id="Modelo" class="form-select">
                                <option value="null" selected></option>
                                <option value="Tour 144">Tour 144</option>
                                <option value="Tour 170">Tour 170</option>
                                <option value="Lounge">Lounge</option>
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row m-3">
                        <div class="col">
                            <label for="Color" class="form-label">Color</label>
                            <InputSelect @bind-Value="newUnit.color" id="Color" class="form-select">
                                <option value="null" selected></option>
                                <option value="Claro">Claro</option>
                                <option value="Oscuro">Oscuro</option>
                            </InputSelect>
                        </div>
                        <div class="col">
                            <label for="Opcion" class="form-label">Opcion</label>
                            <InputSelect @bind-Value="newUnit.opt" id="Opcion" class="form-select">
                                <option value="null" selected></option>
                                <option value="Estandar">Estandar</option>
                                <option value="Twin Bed">Twin Bed</option>
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row m-3">
                        <div class="col">
                            <label for="Ext" class="form-label">Extendida</label>
                            <InputSelect @bind-Value="newUnit.ext" id="Ext" class="form-select">
                                <option value="null" selected></option>
                                <option value="1">Si</option>
                                <option value="0">No</option>
                            </InputSelect>
                        </div>
                        <div class="col">
                            <label for="fechaCorte" class="form-label">Fecha de Corte</label>
                            <InputDate @bind-Value="newUnit.cut_off_date" id="fechaCorte" class="form-control" />
                        </div>
                    </div>
                    <div class="row m-3">
                        <div class="col">
                            <label for="Linea" class="form-label">Linea</label>
                            <InputSelect @bind-Value="newUnit.line" id="Linea" class="form-select">
                                <option value="null" selected></option>
                                <option value="1">RV 1</option>
                                <option value="2">RV 2</option>
                                <option value="3">Linea A</option>
                                <option value="4">Linea B</option>
                            </InputSelect>
                        </div>
                        <div class="col">
                            <label for="userid" class="form-label">User ID</label>
                            <InputNumber @bind-Value="newUnit.user_id" id="userid" class="form-control" placeholder="User ID" aria-label="UserId"></InputNumber>
                        </div>
                        <div class="col d-flex justify-content-start py-3 mt-3">
                            <button class="btn btn-success" @onclick="(() => CreateUnit(newUnit))">Crear Unidad</button>
                        </div>
                    </div>
                    @if (showConfirmationMessage)
                    {
                        <div class="alert alert-success" role="alert">
                            <strong>La unidad se creo correctamente!</strong>
                        </div>
                    }
                    else if(showErrorMessage)
                    {
                        <div class="alert alert-danger" role="alert">
                            <strong>Hubo un error al crear la unidad!</strong>
                        </div>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    UnitModel newUnit = new UnitModel();

    bool showConfirmationMessage = false;
    bool showErrorMessage = false;
    

    public async Task CreateUnit(UnitModel myUnit)
    {
        var resultCreateModel = await Http.PostAsJsonAsync("api/Unit", myUnit);
        if (resultCreateModel.IsSuccessStatusCode)
        {
            var createdUnit = await resultCreateModel.Content.ReadFromJsonAsync<UnitModel>();
            if(createdUnit != null)
            {
                await AddUnitFurnitures(createdUnit);
            }
        }
    }

    public async Task AddUnitFurnitures(UnitModel myUnit)
    {
        try
        {
            if (myUnit.model == "Tour 170" && myUnit.ext == 1)
            {
                for (int i = 2; i <= 12; i++)
                {
                    var unitFurniture = new UnitFurnitureModel
                        {
                            unit_id = myUnit.id,
                            furniture_id = i
                        };

                    var response = await Http.PostAsJsonAsync("api/UnitFurniture", unitFurniture);
                    if (response.IsSuccessStatusCode)
                    {
                        // Handle success
                        // Update the UI accordingly
                        showConfirmationMessage = true;
                        newUnit = new UnitModel();
                        StateHasChanged();
                        await Task.Delay(3000);
                        showConfirmationMessage = false;
                    }
                    else
                    {
                        // Handle failure
                        // Update the UI accordingly
                        showErrorMessage = true;
                        newUnit = new UnitModel();
                        StateHasChanged();
                        await Task.Delay(3000);
                        showErrorMessage = false;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            // Aquí se capturan y manejan excepciones que puedan ocurrir durante la ejecución del código anterior
            // Por ejemplo, se puede registrar la excepción, notificar al usuario o realizar alguna acción de recuperación
            // Dependiendo del caso y de los requisitos del sistema
            Console.WriteLine($"An error occurred: {ex.Message}");
            // También se puede lanzar una nueva excepción si es necesario propagar el error
            throw new Exception("An error occurred while adding unit furnitures.", ex);
        }
    }
}